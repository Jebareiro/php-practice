<?php
/*
 * EJERCICIO:
 * Entiende el concepto de recursividad creando una funciÃ³n recursiva que imprima
 * nÃºmeros del 100 al 0.
 *
 * DIFICULTAD EXTRA (opcional):
 * Utiliza el concepto de recursividad para:
 * - Calcular el factorial de un nÃºmero concreto (la funciÃ³n recibe ese nÃºmero).
 * - Calcular el valor de un elemento concreto (segÃºn su posiciÃ³n) en la 
 *   sucesiÃ³n de Fibonacci (la funciÃ³n recibe la posiciÃ³n).
 */

 /*
--------------------------------------------
 ðŸ”§ Â¿QuÃ© es recursividad?
Una funciÃ³n recursiva es una funciÃ³n que se 
llama a sÃ­ misma para resolver un problema 
dividiÃ©ndolo en partes mÃ¡s pequeÃ±as.
--------------------------------------------
*/

// 1- Funcion recursiva que imprime numeros de 100 a 0

function contar_regresivo($n) {
    if ($n < 0) {
        // : cuando $n es menor que 0, la funcion deja de llamarse
        return;
    }
    echo "$n\n"; // imprime el nÃºmero actual seguido de salto de lÃ­nea
    contar_regresivo($n - 1); // Llama a sÃ­ misma con $n - 1 para seguir contando hacia abajo
}

// Llamamos a la funcion para imprimir del 100 al 0
echo "Cuenta regresiva del 100 al 0:\n";
contar_regresivo(100);


/* 2- Funcion recursiva para calcular factorial

-------------------------------------
El factorial de un nÃºmero n es:
n! = n * (n-1) * (n-2) * ... * 1 
-------------------------------------*/

function factorial($n) {
    if ($n <= 1) {
        // : Factorial de 0 o 1 es 1
        return 1;
    }
    // Retorna n multiplicado por factorial de n-1 (llamada recursiva)
    return $n * factorial($n - 1);
}

// Ejemplo con factorial de 5
echo "\nFactorial de 5: " . factorial(5) . "\n";


/* 3- Funcion recursiva para calcular FIBONACCI

----------------------------------------
ðŸ”¢ Â¿QuÃ© es la sucesiÃ³n de Fibonacci?
Es una serie de nÃºmeros donde cada nÃºmero 
es la suma de los dos anteriores.
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...
-----------------------------------------*/

function fibonacci($n) {
    if ($n == 0){
        return 0;
    } elseif ($n == 1) {
        return 1;
    } else {
        // RECURSION : suma de los dos valores anteriores en la sucesiÃ³n
        return fibonacci($n - 1) + fibonacci($n - 2);
    }
}

// EJEMPLO con fibonacci en la posicion 7
echo "\nFibonacci en posicion 7: " . fibonacci(7) . "\n";

?>
